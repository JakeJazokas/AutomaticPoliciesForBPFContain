#!/usr/bin/env bpftrace

BEGIN
{
	printf("Tracing Filesystem Function and Returns ... Hit Ctrl-C to end.\n");
    @cap[0] = "CAP_CHOWN";
	@cap[1] = "CAP_DAC_OVERRIDE";
	@cap[2] = "CAP_DAC_READ_SEARCH";
	@cap[3] = "CAP_FOWNER";
	@cap[4] = "CAP_FSETID";
	@cap[5] = "CAP_KILL";
	@cap[6] = "CAP_SETGID";
	@cap[7] = "CAP_SETUID";
	@cap[8] = "CAP_SETPCAP";
	@cap[9] = "CAP_LINUX_IMMUTABLE";
	@cap[10] = "CAP_NET_BIND_SERVICE";
	@cap[11] = "CAP_NET_BROADCAST";
	@cap[12] = "CAP_NET_ADMIN";
	@cap[13] = "CAP_NET_RAW";
	@cap[14] = "CAP_IPC_LOCK";
	@cap[15] = "CAP_IPC_OWNER";
	@cap[16] = "CAP_SYS_MODULE";
	@cap[17] = "CAP_SYS_RAWIO";
	@cap[18] = "CAP_SYS_CHROOT";
	@cap[19] = "CAP_SYS_PTRACE";
	@cap[20] = "CAP_SYS_PACCT";
	@cap[21] = "CAP_SYS_ADMIN";
	@cap[22] = "CAP_SYS_BOOT";
	@cap[23] = "CAP_SYS_NICE";
	@cap[24] = "CAP_SYS_RESOURCE";
	@cap[25] = "CAP_SYS_TIME";
	@cap[26] = "CAP_SYS_TTY_CONFIG";
	@cap[27] = "CAP_MKNOD";
	@cap[28] = "CAP_LEASE";
	@cap[29] = "CAP_AUDIT_WRITE";
	@cap[30] = "CAP_AUDIT_CONTROL";
	@cap[31] = "CAP_SETFCAP";
	@cap[32] = "CAP_MAC_OVERRIDE";
	@cap[33] = "CAP_MAC_ADMIN";
	@cap[34] = "CAP_SYSLOG";
	@cap[35] = "CAP_WAKE_ALARM";
	@cap[36] = "CAP_BLOCK_SUSPEND";
	@cap[37] = "CAP_AUDIT_READ";
	@cap[38] = "CAP_PERFMON";
	@cap[39] = "CAP_BPF";
	@cap[40] = "CAP_CHECKPOINT_RESTORE";
}

// Read Functions

kretfunc:vfs_read
/comm == str($1)/
{
	$fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Read, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_readv
/comm == str($1)/
{
	$fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Read, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_readlink
/comm == str($1)/
{
	$fileName = str(args->dentry->d_name.name);
	
	$parentDir = args->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Read, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

// Write Functions

kretfunc:vfs_write
/comm == str($1)/
{
	$fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Write, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_writev
/comm == str($1)/
{
	$fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Write, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

// Access Functions

tracepoint:syscalls:sys_enter_access,
tracepoint:syscalls:sys_enter_faccessat,
tracepoint:syscalls:sys_enter_faccessat2
/comm == str($1)/
{
	@accessFilenamePtr[tid] = args->filename;
	@accessFilename[tid] = str(args->filename);
}

tracepoint:syscalls:sys_exit_access,
tracepoint:syscalls:sys_exit_faccessat,
tracepoint:syscalls:sys_exit_faccessat2
/@accessFilenamePtr[tid]/
{
	// Ignore relative paths
	if(strncmp("/", @accessFilename[tid], 1) == 0){
		printf("VFS: Path: %s", @accessFilename[tid]);
		printf(", Program: %s, Tid: %d, Mode: Access, Return: %d\n", comm, tid, args->ret);
	}
	
	delete(@accessFilename[tid]);
	delete(@accessFilenamePtr[tid]);
}

// Modification Functions

kretfunc:vfs_fileattr_set
/comm == str($1)/
{
	$fileName = str(args->dentry->d_name.name);
	
	$parentDir = args->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);	

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_ioctl
/comm == str($1)/
{
    $fileName = str(args->filp->f_path.dentry->d_name.name);
	
	$parentDir = args->filp->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_link
/comm == str($1)/
{
    $fileName = str(args->new_dentry->d_name.name);
	
	$parentDir = args->new_dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:file_update_time
/comm == str($1)/
{
    $fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:chmod_common
/comm == str($1)/
{
	$fileName = str(args->path->dentry->d_name.name);
	
	$parentDir = args->path->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:chown_common
/comm == str($1)/
{
	$fileName = str(args->path->dentry->d_name.name);
	
	$parentDir = args->path->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);
			
			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Modify, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

// Execute Functions

tracepoint:syscalls:sys_enter_exec*
{
	@executeFilenamePtr[tid] = args->filename;
	@executeFilename[tid] = str(args->filename);
}

tracepoint:syscalls:sys_exit_exec*
/@executeFilenamePtr[tid]/
{
	if(comm == str($1))
	{
		printf("VFS: Path: %s", @executeFilename[tid]);
		printf(", Program: %s, Tid: %d, Mode: Execute, Return: %d\n", comm, tid, args->ret);
	}
	delete(@executeFilenamePtr[tid]);
	delete(@executeFilename[tid]);
}

// Write + Execute + Access Functions

kretfunc:vfs_rmdir
/comm == str($1)/
{
	$fileName = str(args->dentry->d_name.name);
	
	$parentDir = args->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Remove, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_unlink
/comm == str($1)/
{
	$fileName = str(args->dentry->d_name.name);
	
	$parentDir = args->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: Remove, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

// Write + Execute Functions

kretfunc:vfs_rename
/comm == str($1)/
{
	$fileName = str(args->rd->new_dentry->d_name.name);
	
	$parentDir = args->rd->new_dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	printf("%s, Program: %s, Tid: %d, Mode: Rename, Flags: %d, Return: %d\n", $fileName, comm, tid, args->rd->flags, retval);
	
	clear(@fullPath);
}

kretfunc:vfs_mkdir
/comm == str($1)/
{
	$fileName = str(args->dentry->d_name.name);
	
	$parentDir = args->dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Tid: %d, Mode: CreateDir, Return: %d\n", $fileName, comm, tid, retval);
	
	clear(@fullPath);
}

// Open functions

kretfunc:vfs_open
/comm == str($1)/
{
	$fileName = str(args->file->f_path.dentry->d_name.name);
	
	$parentDir = args->file->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("VFS: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	$fileFlags = args->file->f_flags;
	
	printf("%s, Program: %s, Tid: %d, Mode: Open, Flags: %x, Return: %d\n", $fileName, comm, tid, $fileFlags, retval);
	
	clear(@fullPath);
}

// Numbered Devices

kretfunc:blkdev_open
/comm == str($1)/
{
	printf("Device: Type: Block, Major: %d, Minor: %d, Flags: %x, Return: %d\n", (args->inode->i_rdev >> 20), (args->inode->i_rdev & ((1 << 20)-1)), args->inode->i_flags, retval);
}

kretfunc:chrdev_open
/comm == str($1)/
{
	printf("Device: Type: Char, Major: %d, Minor: %d, Flags: %x, Return: %d\n", (args->inode->i_rdev >> 20), (args->inode->i_rdev & ((1 << 20)-1)), args->inode->i_flags, retval);
}

// Signal Functions

tracepoint:signal:signal_generate
/comm == str($1)/
{
    printf("Signal: From: %s, To: %s, SigNum: %d, Return: %d\n", comm, args->comm, args->sig, args->result);
}

// Capability Functions

kretfunc:cap_capable
/comm == str($1)/
{
	$capInt = (int32) args->cap;
    printf("Capability: Program: %s, CapInt: %d, CapName: %s, Options: %d, Return: %d\n", comm, $capInt, @cap[$capInt], args->opts, retval);
}

// IPC - Pipe Functions

kretfunc:pipe_read
/comm == str($1)/
{
    $fileName = str(args->iocb->ki_filp->f_path.dentry->d_name.name);
	
	$parentDir = args->iocb->ki_filp->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("Pipe: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Mode: Read, Return: %d\n", $fileName, comm, retval);
	
	clear(@fullPath);
}

kretfunc:pipe_write
/comm == str($1)/
{
    $fileName = str(args->iocb->ki_filp->f_path.dentry->d_name.name);
	
	$parentDir = args->iocb->ki_filp->f_path.dentry->d_parent;
	
	@fullPath[0] = str($parentDir->d_name.name);
	
	$maxCount = 0;
	
	if(strncmp("/", @fullPath[0], 1) == 1){
		$count = 1;
		while($count < 10){ 
			$parentDir = $parentDir->d_parent;
			
			if(strncmp("root", str($parentDir->d_name.name), 4) == 0){
				$maxCount = $count;
				break;
			}
			
			@fullPath[$count] = str($parentDir->d_name.name);

			if(strncmp("/", @fullPath[$count], 1) == 0){
				$maxCount = $count;
				break;
			}
			$count++;
		}
	} 
	
	printf("Pipe: Path: ");
	
	while($maxCount >= 0){
		if(strncmp("/", @fullPath[$maxCount], 1) == 1){
			printf("%s/", @fullPath[$maxCount]);
		}else{
			printf("%s", @fullPath[$maxCount]);
		}
		$maxCount--;
	}
	
	printf("%s, Program: %s, Mode: Write, Return: %d\n", $fileName, comm, retval);
	
	clear(@fullPath);
}

// IPC - Unix Socket Functions

kretfunc:unix_stream_sendmsg
/comm == str($1)/
{
	$sendToProcName = str(args->msg->msg_iocb->ki_filp->f_path.dentry->d_name.name);
	printf("Socket: Program: %s, Mode: Send, To: %s, Return: %d\n", comm, $sendToProcName, retval);
}

kretfunc:unix_stream_recvmsg
/comm == str($1)/
{
	$recieveProcName = str(args->msg->msg_iocb->ki_filp->f_path.dentry->d_name.name);
	printf("Socket: Program: %s, Mode: Recieve, From: %s, Return: %d\n", comm, $recieveProcName, retval);
}

END
{
	clear(@accessFilename);
	clear(@accessFilenamePtr);
	clear(@executeFilename);
	clear(@executeFilenamePtr);
	clear(@cap);
	clear(@fullPath);
}